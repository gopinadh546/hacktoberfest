int Max(int arr[], int n) 
{
    int max = arr[0];
        for (int i=1; i<n; i++)
        if (arr[i] > max)
            max = arr[i];
    return max;
}
 
void countSort(int arr[], int n, int exp , int base) 
{
    int output[n]; 
    int i;
    int count[base];
    
        for(int l=0 ;l<base ;l++)
        {
            count[l]=0;
        }
 
 
    for (i = 0; i < n; i++)
        count[(arr[i] / exp) % base]++;
 
    for (i = 1; i < base; i++)
        count[i] += count[i - 1];
 
    for (i = n - 1; i >= 0; i--) 
        output[--count[(arr[i] / exp) % base]] = arr[i];
    
 
    for (i = 0; i < n; i++)
        arr[i] = output[i];
}
 

void radixsort(int arr[], int n , int base) 
{
    int m = Max(arr, n);
 
    int exp;
    for (exp = 1; m / exp > 0; exp *= base)
        countSort(arr, n, exp , base);
}

void print(int arr[], int n) 
{
    for (int i=0; i < n; i++)
        printf("%d ", arr[i]);

    printf("\n");
}


int main()
{   
    double radix_time=0.0;

	clock_t start, end;
    for(int base=0 ; base<100 ; base++)
    {

    int arr[] = { 140, 65, 85, 70, 904, 34, 4, 55 };
    int n = sizeof(arr) / sizeof(arr[0]);

    start = clock();
    radixsort(arr, n , base+2);
    print(arr, n);
    end = clock();

    radix_time =radix_time + ((double) (end - start)) / (CLOCKS_PER_SEC);

	printf("\nTime taken to print  numbers with base %d  is: %f\n",base+2, radix_time);
    }
	printf("\nAvg Time taken to print with 100 different bases in radixsort is: %f\n", radix_time/100);

    
    return 0;
}
